(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('mocha')) :
	typeof define === 'function' && define.amd ? define(['exports', 'mocha'], factory) :
	(factory((global.BigTest = global.BigTest || {}, global.BigTest.Mocha = {}),global.mocha));
}(this, (function (exports,mocha) { 'use strict';

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var _sPO = Object.setPrototypeOf || function _sPO(o, p) {
  o.__proto__ = p;
  return o;
};

var _construct = typeof Reflect === "object" && Reflect.construct || function _construct(Parent, args, Class) {
  var Constructor,
      a = [null];
  a.push.apply(a, args);
  Constructor = Parent.bind.apply(Parent, a);
  return _sPO(new Constructor(), Class.prototype);
};

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
}

var _mocha$describe = mocha.describe;
var describe$2 = _mocha$describe === void 0 ? global.describe : _mocha$describe;
var _mocha$before = mocha.before;
var before$2 = _mocha$before === void 0 ? global.before : _mocha$before;
var _mocha$beforeEach = mocha.beforeEach;
var beforeEach$2 = _mocha$beforeEach === void 0 ? global.beforeEach : _mocha$beforeEach;
var _mocha$after = mocha.after;
var after$2 = _mocha$after === void 0 ? global.before : _mocha$after;
var _mocha$afterEach = mocha.afterEach;
var afterEach$2 = _mocha$afterEach === void 0 ? global.afterEach : _mocha$afterEach;
var _mocha$it = mocha.it;
var it$2 = _mocha$it === void 0 ? global.it : _mocha$it;

function convergeOn(assertion) {
  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2000;
  var always = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var context = this;
  var start = Date.now();
  var interval = 10;
  var stats = {
    start: start,
    runs: 0,
    end: start,
    elapsed: 0,
    always: always,
    timeout: timeout,
    value: undefined
  };
  return new Promise(function (resolve, reject) {
    (function loop() {
      stats.runs += 1;

      try {
        var results = assertion.call(context);
        var doLoop = Date.now() - start < timeout;

        if (always && doLoop) {
          setTimeout(loop, interval);
        } else if (results === false) {
          throw new Error('convergent assertion returned `false`');
        } else if (!always && !doLoop) {
          throw new Error('convergent assertion was successful, ' + "but exceeded the ".concat(timeout, "ms timeout"));
        } else {
          stats.end = Date.now();
          stats.elapsed = stats.end - start;
          stats.value = results;
          resolve(stats);
        }
      } catch (error) {
        var _doLoop = Date.now() - start < timeout;

        if (!always && _doLoop) {
          setTimeout(loop, interval);
        } else if (always || !_doLoop) {
          reject(error);
        }
      }
    })();
  });
}

function getElapsedSince(start, max) {
  var elapsed = Date.now() - start;

  if (elapsed >= max) {
    throw new Error("convergence exceeded the ".concat(max, "ms timeout"));
  }

  return elapsed;
}



function collectStats(accumulator, stats) {
  accumulator.runs += stats.runs;
  accumulator.elapsed += stats.elapsed;
  accumulator.end = stats.end;
  accumulator.value = stats.value;
  accumulator.stack.push(stats);
  return stats.value;
}

function isConvergence(obj) {
  return !!obj && _typeof(obj) === 'object' && '_stack' in obj && Array.isArray(obj._stack) && 'timeout' in obj && typeof obj.timeout === 'function' && 'run' in obj && typeof obj.run === 'function';
}
function runAssertion(subject, arg, last, stats) {
  var timeout = stats.timeout - getElapsedSince(stats.start, stats.timeout);
  var assert = subject.assert.bind(null, arg);

  if (subject.always && !last) {
    if (subject.timeout) {
      timeout = Math.min(timeout, subject.timeout);
    } else {
      timeout = Math.max(stats.timeout / 10, 20);
    }
  }

  return convergeOn(assert, timeout, subject.always).then(function (convergeStats) {
    return collectStats(stats, convergeStats);
  });
}
function runExec(subject, arg, last, stats) {
  var start = Date.now();
  var result = subject.exec(arg);

  var collectExecStats = function collectExecStats(value) {
    return collectStats(stats, {
      start: start,
      runs: 1,
      end: Date.now(),
      elapsed: getElapsedSince(start, stats.timeout),
      value: value
    });
  };

  if (isConvergence(result)) {
    var timeout = stats.timeout - getElapsedSince(start, stats.timeout);

    if (!last) {
      result = result.do(function (ret) {
        return ret;
      });
    }

    return result.timeout(timeout).run().then(function (convergeStats) {
      return collectStats(stats, convergeStats);
    });
  } else if (result && typeof result.then === 'function') {
    return result.then(collectExecStats);
  } else {
    return collectExecStats(result);
  }
}

var Convergence = function () {
  function Convergence() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var prev = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, Convergence);

    if (typeof options === 'number') {
      options = {
        _timeout: options
      };
    }

    var _options = options,
        _options$_timeout = _options._timeout,
        _timeout = _options$_timeout === void 0 ? prev._timeout || 2000 : _options$_timeout,
        _options$_stack = _options._stack,
        _stack = _options$_stack === void 0 ? [] : _options$_stack;

    _stack = _toConsumableArray(prev._stack || []).concat(_toConsumableArray(_stack));
    Object.defineProperties(this, {
      _timeout: {
        value: _timeout
      },
      _stack: {
        value: _stack
      }
    });
  }

  _createClass(Convergence, [{
    key: "timeout",
    value: function timeout(_timeout2) {
      if (typeof _timeout2 !== 'undefined') {
        return new this.constructor(_timeout2, this);
      } else {
        return this._timeout;
      }
    }
  }, {
    key: "once",
    value: function once(assert) {
      return new this.constructor({
        _stack: [{
          assert: assert
        }]
      }, this);
    }
  }, {
    key: "always",
    value: function always(assert, timeout) {
      return new this.constructor({
        _stack: [{
          always: true,
          timeout: timeout,
          assert: assert
        }]
      }, this);
    }
  }, {
    key: "do",
    value: function _do(exec) {
      return new this.constructor({
        _stack: [{
          exec: exec
        }]
      }, this);
    }
  }, {
    key: "append",
    value: function append(convergence) {
      if (!(convergence instanceof Convergence)) {
        throw new Error('.append() only works with convergence instances');
      }

      return new this.constructor({
        _stack: convergence._stack
      }, this);
    }
  }, {
    key: "run",
    value: function run() {
      var _this = this;

      var start = Date.now();
      var stats = {
        start: start,
        runs: 0,
        end: start,
        elapsed: 0,
        value: undefined,
        timeout: this._timeout,
        stack: []
      };
      return this._stack.reduce(function (promise, subject, i) {
        var last = i === _this._stack.length - 1;
        return promise.then(function (ret) {
          if (subject.assert) {
            return runAssertion(subject, ret, last, stats);
          } else if (subject.exec) {
            return runExec(subject, ret, last, stats);
          }
        });
      }, Promise.resolve()).then(function () {
        return stats;
      });
    }
  }]);
  return Convergence;
}();

Convergence.isConvergence = isConvergence;

function convergent(assertion, always) {
  return function () {
    var assert = assertion.bind(this);
    var converge = new Convergence();
    var timeout = this.timeout();

    if (always) {
      converge = converge.always(assert);
    } else {
      converge = converge.once(assert);
    }

    this.timeout(0);
    return converge.timeout(timeout).run();
  };
}
function handleConvergence(fn) {
  return function () {
    var _this = this;

    var result = fn.apply(this, arguments);
    var timeout = this.timeout();

    if (Convergence.isConvergence(result)) {
      this.timeout(0);
      return result.do(function () {
        return _this.timeout(timeout);
      }).timeout(timeout).run();
    } else {
      return result;
    }
  };
}

function convergentIt(it$$1, always) {
  return function (title, assertion) {
    var test = it$$1(title, assertion && convergent(assertion, always));
    return always ? test.timeout(100) : test;
  };
}

function convergentHook(hook) {
  return function (fn) {
    return hook(handleConvergence(fn));
  };
}

function pauseTest(it$$1) {
  return function (title) {
    return it$$1(title, function () {
      this.timeout(0);
      return new Promise(function () {});
    });
  };
}

var it$1 = convergentIt(it$2);
it$1.only = convergentIt(it$2.only);
it$1.always = convergentIt(it$2, true);
it$1.always.only = convergentIt(it$2.only, true);
it$1.only.always = it$1.always.only;
it$1.pause = pauseTest(it$2);
it$1.pause.only = pauseTest(it$2.only);
it$1.only.pause = it$1.pause.only;
it$1.skip = it$2.skip;
it$1.always.skip = it$2.skip;
var before$1 = convergentHook(before$2);
var beforeEach$1 = convergentHook(beforeEach$2);
var after$1 = convergentHook(after$2);
var afterEach$1 = convergentHook(afterEach$2);
var describe$1 = describe$2;

exports.it = it$1;
exports.before = before$1;
exports.beforeEach = beforeEach$1;
exports.after = after$1;
exports.afterEach = afterEach$1;
exports.describe = describe$1;
exports.test = it$1;
exports.context = describe$1;
exports.specify = it$1;
exports.suiteSetup = before$1;
exports.setup = beforeEach$1;
exports.suiteTeardown = after$1;
exports.teardown = afterEach$1;
exports.suite = describe$1;

Object.defineProperty(exports, '__esModule', { value: true });

})));
